name: "Build OCI Image"

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:

env:
  REPOS: "ghcr.io/cosanet/cosanet"

jobs:
  build-image:
    name: "Build OCI image"
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    outputs:
      RAW_IMG_TAGS: ${{ steps.define-targets.outputs.RAW_IMG_TAGS }}
    steps:
      - uses: actions/checkout@v4
      - name: Define TARGETS
        id: define-targets
        run: |
          PLATFORM=${{ matrix.platform }}
          PLATFORM_PAIR=${PLATFORM//\//-}
          echo "PLATFORM_PAIR=$PLATFORM_PAIR" | tee -a $GITHUB_OUTPUT >> $GITHUB_ENV

          IMG_TAGS="latest"

          if [ ${GITHUB_REF_TYPE:-} == 'tag' -a -n "$(echo $GITHUB_REF_NAME | grep -iE '^v[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9.-]+)?$')" ]; then
            TAG=${GITHUB_REF_NAME#v}
            RELEASE=""
            case "$TAG" in
              *-*)
                RELEASE="-${TAG#*-}"
                ;;
            esac
            SEMVER_CORE="${TAG%%-*}"
            IMG_TAGS="${IMG_TAGS} $TAG ${SEMVER_CORE%.*}${RELEASE} ${SEMVER_CORE%%.*}${RELEASE}"
          fi
          echo RAW_IMG_TAGS="$IMG_TAGS" | tee -a $GITHUB_OUTPUT >> $GITHUB_ENV

          echo "Targets:"
          TARGETS=""
          PLATFORM_TAGS=""
          for REPO in $REPOS; do
            for IMG_TAG in $IMG_TAGS; do
              PLATFORM_TAGS="${PLATFORM_TAGS},${IMG_TAG}-$PLATFORM_PAIR"
              TARGETS="${TARGETS},${REPO}:${IMG_TAG}-$PLATFORM_PAIR"
              echo "- ${REPO}:${IMG_TAG}-$PLATFORM_PAIR"
            done
          done
          echo PLATFORM_TAGS=${PLATFORM_TAGS#,} | tee -a $GITHUB_OUTPUT >> $GITHUB_ENV
          echo TARGETS=${TARGETS#,} | tee -a $GITHUB_OUTPUT >>$GITHUB_ENV

          MODULE=$(grep module go.mod | cut -d\  -f2)
          BINBASE=${MODULE##*/}
          VERSION=${VERSION:-$GITHUB_REF_NAME}
          VERSION=${VERSION:-v0.0.0}
          COMMIT_HASH="$(git rev-parse --short HEAD 2>/dev/null)"
          COMMIT_HASH=${COMMIT_HASH:-00000000}
          DIRTY=$(git diff --quiet 2>/dev/null || echo '-dirty')
          BUILD_TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')

          echo "VERSION=${VERSION}" | tee -a $GITHUB_OUTPUT >>$GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}${DIRTY}" | tee -a $GITHUB_OUTPUT >>$GITHUB_ENV
          echo "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}" | tee -a $GITHUB_OUTPUT >>$GITHUB_ENV

      - uses: docker/setup-buildx-action@v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          build-args: |
            BUILD_TIMESTAMP=${{ env.BUILD_TIMESTAMP }}
            COMMIT_HASH=${{ env.COMMIT_HASH }}
            PROJECT_URL=${{ github.event.repository.html_url }}
            VERSION=${{ env.VERSION }}
          push: true
          tags: ${{ env.TARGETS }}
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false

      - name: Summary
        run: |
          echo "âœ… Docker image created:" | tee -a $GITHUB_STEP_SUMMARY
          for TGT in ${TARGETS//,/\ }; do
            echo " - $TGT" | tee -a $GITHUB_STEP_SUMMARY
          done

  merge-images:
    name: "Merge platform images into one"
    needs: build-image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge images
        run: |
          for IMG_TAG in ${{ needs.build-image.outputs.RAW_IMG_TAGS }}; do
            for REPO in $REPOS; do
              TGT=${REPO}:${IMG_TAG}

              docker manifest create $TGT \
                $TGT-linux-amd64 \
                $TGT-linux-arm64

              docker manifest annotate $TGT $TGT-linux-amd64 --os linux --arch amd64
              docker manifest annotate $TGT $TGT-linux-arm64 --os linux --arch arm64

              docker manifest push $TGT

              echo "merged image $TGT" | tee -a $GITHUB_STEP_SUMMARY
            done
          done

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
